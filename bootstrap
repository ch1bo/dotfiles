#!/usr/bin/env bash
#
# bootstrap installs things.

set -e

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

# Link a 'src' from 'dst'
link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst (current: ${currentSrc}), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi  

   
  local dir=$(dirname "$dst")
  if [ ! -e "$dir" ]; then
    user "Base directory $dir not found ($(basename "$src")), do you still want to install it?\n\
        [y]es, [n]o?"
    read -n 1 action
    case "$action" in
      y )
        mkdir -p "$dir";;
      n )
        skip=true;;
    esac
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$src" "$dst"
    success "created $dst -> $src"
  fi
}

bootstrap () {
  DOTFILES_ROOT=$1
  info 'Bootstrapping dotfiles'
  local overwrite_all=false backup_all=false skip_all=false
  for src in $(find -H "$DOTFILES_ROOT" -mindepth 1 -name '*.symlink' -not -path '*.git*')
  do
    base="${src%.symlink}"
    dst="$HOME/.${base#*$DOTFILES_ROOT/*/}"
    link_file "$src" "$dst"
  done
}

broken_links () {
  info 'Looking for broken dotfile links in $HOME'
  local remove_all=false skip_all=false
  for broken in $(find $HOME -xtype l -path "$HOME/.*"); do
    local remove=false skip=false
    local action=
    if [ "$remove_all" == "false" ] && [ "$skip_all" == "false" ]; then
      user "Found broken link ${broken} -> $(readlink ${broken}), what do you want to do?\n\
      [s]kip, [S]kip all, [r]emove, [R]emove all?"
      read -n 1 action
      case "$action" in
        r )
          remove=true;;
        R )
          remove_all=true;;
        s )
          skip=true;;
        S )
          skip_all=true;;
        * )
          ;;
        esac
    fi

    remove=${remove:-$remove_all}
    skip=${skip:-$skip_all}

    if [ "${remove}" == "true" ]
    then
      rm "${broken}"
      success "removed ${broken}"
    fi
    if [ "${skip}" == "true" ]
    then
      success "skipped ${broken}"
    fi
  done
}

bootstrap "$(realpath $(dirname "$0"))"
broken_links

success 'All done'
