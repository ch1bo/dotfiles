#+TITLE: Liskamm

A NixOS re-incarnation of my server in smaller, also old, but a bit more
powerful hardware.

| Model | Fujitsu Esprimo                |
| CPU   | Intel Core i7 6700T - 4 cores  |
| RAM   | G.Skill Ripjaws DDR4 2133 32GB |
| SSD   | WD Blue NVMe 500GB             |
| SSD   | SanDisk Plus SATA 2TB          |
| SDD   | Intenso TOP SATA 2TB           |

* TODO
- [X] copy rootfs (data)
- [X] check bootloader
- [X] Install from live USB
- [X] data zpool mount
- [X] rebuild with hydraw enabled
- [X] off-site backups
- [X] make disk-level ZFS pools
- [ ] Fix mail state?
- [ ] Fix webmail container

* Disk setup

Operating system on the NVMe SSD and data on two 2TB SATA SSDs in a separate ZFS
Raid1 pool.

The SSD is partitioned similar to my other NixOS hosts:

#+begin_src
Disk /dev/disk/by-id/nvme-WD_Blue_SN570_500GB_22051Z800497: 976773168 sectors, 465.8 GiB
Sector size (logical/physical): 512/512 bytes
Disk identifier (GUID): 7266E875-ED83-4182-A2A5-40D0890DB256
Partition table holds up to 128 entries
Main partition table begins at sector 2 and ends at sector 33
First usable sector is 34, last usable sector is 976773134
Partitions will be aligned on 2048-sector boundaries
Total free space is 4062 sectors (2.0 MiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048         1050623   512.0 MiB   EF00  boot
   2         1050624       909664270   433.3 GiB   8300  root
   3       909666304       976773119   32.0 GiB    8200  swap
#+end_src

A standard FAT32 EFI boot partition, swap and root partition, where the latter is home to a ZFS pool:

#+begin_src
mkfs.vfat -F32 -n boot /dev/disk/by-id/nvme-WD_Blue_SN570_500GB_22051Z800497-part1

mkswap /dev/disk/by-id/nvme-WD_Blue_SN570_500GB_22051Z800497-part3

zpool create -o ashift=12 -O acltype=posixacl -O xattr=sa -O mountpoint=none rpool /dev/disk/by-id/nvme-WD_Blue_SN570_500GB_22051Z800497-part2
#+end_src

Data sets for the new root pool:

#+begin_src
zfs create -o mountpoint=none rpool/local
zfs create -o mountpoint=legacy rpool/local/nix
zfs create -o mountpoint=none rpool/safe
zfs create -o mountpoint=legacy rpool/safe/rpool
zfs create -o refreservation=512M -o mountpoint=none rpool/reserved
#+end_src

** Shrink reserved data set
Where the =rpool/reserved= can be shrinked when space runs out (required for deletion on a COW file system) with

#+begin_src
zfs set refreservation=none rpool/reserved
#+end_src

** Adding a disk to the ZFS pool

Partitioned the disk using a single partition and issued:
#+begin_src
zpool attach rpool /dev/disk/by-id/ata-ST2000LM015-2E8174_WDZV6EHY-part2 /dev/disk/by-id/ata-ST2000LM015-2E8174_WDZXFS70-part1
#+end_src

Then, zfs starts mirroring automatically (= resilvering) where status can be seen in
#+begin_src
zpool status
#+end_src

** Replacing a disk in the ZFS pool (e.g. SDD upgrade)

#+begin_src
zpool replace dpool /dev/disk/by-id/ata-ST2000LM015-2E8174_WDZXFS70-part1 /dev/disk/by-id/ata-INTENSO_SSD_AA000000000000001966
#+end_src

Then, zfs starts mirroring automatically (= resilvering) where status can be seen in
#+begin_src
zpool status
#+end_src

** Old migration of rootfs from a bigger HDD into the smaller SSD using zfs

Partition the disk and copy the /boot partitition:

#+begin_src
mkfs.vfat -F32 -n boot /dev/disk/by-id/ata-Samsung_SSD_840_EVO_250GB_S1DBNSAF260050K-part1
dd if=/dev/disk/by-id/ata-WDC_WD10JPVX-22JC3T0_WD-WX11A3480983-part1 of=/dev/disk/by-id/ata-Samsung_SSD_840_EVO_250GB_S1DBNSAF260050K-part1 bs=1M status=progress
#+end_src

Create the target zpool, take a snapshot and send it to the new pool:
#+begin_src
zpool create -o ashift=12 -O acltype=posixacl -O xattr=sa -O mountpoint=none root /dev/disk/by-id/ata-Samsung_SSD_840_EVO_250GB_S1DBNSAF260050K-part2
zfs snapshot -r rpool@2022-04-30
zfs send -R rpool@2022-04-30 | zfs recv -Fdu root
#+end_src

Then, mount, =nixos-enter=, =nixos-generate-config= and =nixos-rebuild= to have a bootable system.

NOTE: Actually.. only copying non-nixos stuff would have sufficed :sweat_smile:

** Snapshots
The =dpool= zfs pool and its datasets are snapshotted every 15 minutes. To list snapshots:
#+begin_src
zfs list -t snapshot dpool/data
#+end_src

Snapshots are also available on the mounted filestem in =.zfs=, from which files can be copied to recover:
#+begin_src
ls /data/.zfs/snapshot
rsync -ahz --delete --info=progress2 /data/.zfs/snapshot/zfs-auto-snap_hourly-2024-10-23-08h00U/immich/ /data/immich/
#+end_src

* Off-site backups

The data on this NixOS server is backed up off-site to borgbase. For the configuration to work, the ssh keys and passphrase need to be available at =/root/keys/borg= for this to work. Keys are kept in keepass and need to be installed once:
#+begin_src
mkdir -p /root/keys/borg
keepassxc-cli attachment-export /home/ch1bo/keepass/keepass.kdbx BorgBase id_ed25519 /root/keys/borg/id_ed25519
chmod 0400 /root/keys/borg/id_ed25519
keepassxc-cli show /home/ch1bo/keepass/keepass.kdbx BorgBase -a "mail passphrase" > /root/keys/borg/mail.pass
keepassxc-cli show /home/ch1bo/keepass/keepass.kdbx BorgBase -a "nextcloud passphrase" > /root/keys/borg/nextcloud.pass
keepassxc-cli show /home/ch1bo/keepass/keepass.kdbx BorgBase -a "immich passphrase" > /root/keys/borg/immich.pass
#+end_src

Systemd services run every day to do backups. Check their status with:
#+begin_src
journalctl -u borgbackup-job-immich
#+end_src

Wrapper scripts can be used to list backups:
#+begin_src
borg-job-immich list
#+end_src

To recover, mount an archive and copy files from it:
#+begin_src
borg-job-immich mount :: /mnt
rsync -ahz --delete --info=progress2 /mnt/liskamm-immich-2024-10-23T00:00:04/data/immich/ /data/immich/
#+end_src

Or use =borg extract= (faster):
#+begin_src
cd /data/immich
borg-job-immich extract --list --strip-components 2 ::liskamm-immich-2024-10-23T00:00:04
#+end_src
